# Changelog

## [0.8.1] - 2022-07-02

### Changed
- updated dependencies


## [0.8.0] - 2022-06-28

### Added
- direct-io to learn and requests single values directly without tasks
- backup and restore clusters, which are saved and in sagiri
- new statemachine for cluster-tasks for a cleaner better handable structure
- prototypical not fully functioning graph-learning

### Changed
- consistant usage of uuid's instead of names
- restructured directories
- number of outputs is not longer restricted to MNIST-tests anymore
- input-weight is not limited to 1 anymore, but it is still not the desired final state
- general optimization of the core-code
- changed activation-function in dynamic segments to log2

### Fixed
- handling of empty synapses was fixed

### Removed
- gpu-code was removed for now, because it is not usable at the moment
- outdated dev-class was removed


## [0.7.0] - 2022-02-14

### Changed
- results of request-tasks are now stored on sagiri
- creating templates gets its input-values from a specific data-set from sagiri
- data-sets from sagiri are now pulled in a generic data-format to avoid converting on kyouko
- changed file-transfer from sagiri to be more faster


## [0.6.0] - 2022-01-09

### Added
- store clusters in new database
- generate basic templates and store in new databse
- usage of train-data coming from sagiri

### Changed
- reworked api


## [0.5.0] - 2021-09-26

### Added
- readd scalable synapse-sections
- support for multiple segments
- multi-threading with worker-threads and central queue
- task-queue for asynchronous task-processing and as preparation for later multi-tenant

### Changed
- rework of the initial input-file to be able to handle multi-segments and make bricks configurable

### Removed
- GPU was disabled again, because it has really bad performance compared to a CPU in this setup


## [0.4.0] - 2021-08-01

### Changed
- complete reworked processing by merging the conecept with standard deep-learning
- complete reworked data-structure to be more scalable and easier to handle

### Added
- readded GPU-support for the new structure, but still relative slow in the small MNIST-example, compared to the CPU
- new blossoms for the input of data


## [0.3.0] - 2021-03-29

### Added
- artificial cerebellum for better learing-output
- optional layered mode
- first automatic learning process (requires the layered mode at the moment)

### Changed
- fundamental rework of the data-structures for better performance and reduce memory consumption

### Removed
- GPU-Support is broken at the moment because of the rework (will be fixed in the next version)


## [0.2.0] - 2020-12-29

### Added
- first GPU-Support for 1 GPU with OpenCL
- new network-stack to connect to the new ToriiGateway, which provides client- and monitoring-connection

### Changed
- complete rework of the processing-structures to make the whole process faster with less memory consumption and compatible for the GPU-support
- improved the basic concept to reduce the number of created synapses and reduce some overwriting-problems in the output


## [0.1.0] - 2019-08-19

### Added
- PoC-state:
    - this is basically the PoC-state with tcp-connection to ToriiGateway/KistuneClien/MiyuMonitoring
    - its primary to have a consistent tagged state which is linked against tagged versions of kitsune-repos
    - at the moment it can only learn simple outputs and is still really static

